{"version":3,"file":"static/js/exercises_module.bb388827.chunk.js","mappings":"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","sources":["exercises/components/ExplanationScreen.tsx","exercises/helpers/time.ts","exercises/components/ResultCard.tsx","exercises/pages/ReactionTime.tsx","exercises/hooks/useReactionTime.ts","exercises/helpers/numbers.ts","exercises/pages/SearchNumber.tsx","exercises/hooks/useSearchNumber.ts","exercises/pages/FindImpostor.tsx","exercises/hooks/useFindImpostor.ts","exercises/helpers/strings.ts","exercises/pages/SearchColor.tsx","exercises/hooks/useSearchColor.ts","exercises/pages/ColorText.tsx","exercises/hooks/useColorText.ts","exercises/pages/CaptureColor.tsx","exercises/hooks/useCaptureColor.ts","exercises/pages/ShapeChange.tsx","exercises/hooks/useShapeChange.ts","exercises/hooks/useSoundReaction.ts","exercises/pages/SoundReaction.tsx","exercises/pages/SchulteTable.tsx","exercises/hooks/useSchulteTable.ts","exercises/pages/VisualMemory.tsx","exercises/hooks/useVisualMemory.ts","exercises/pages/TrafficLights.tsx","exercises/hooks/useTrafficLights.ts","exercises/hooks/usePressKey.ts","exercises/components/NoPhone.tsx","exercises/pages/PressKey.tsx","exercises/pages/TargetShoot.tsx","exercises/hooks/useTargetShoot.ts","exercises/pages/LongestLine.tsx","exercises/hooks/useLongestLine.ts","exercises/pages/ClickLimit.tsx","exercises/hooks/useClickLimit.ts","exercises/pages/TypingTest.tsx","exercises/hooks/useTypingTest.ts","exercises/components/SaveScore.tsx","exercises/ExercisesModule.tsx","exercises/hooks/useExercises.ts"],"sourcesContent":["import { useContext } from 'react';\r\nimport { exercisesContext } from '../ExercisesModule';\r\n\r\ninterface Props {\r\n    img: string;\r\n    explanation: string;\r\n    onClick: () => void;\r\n}\r\n\r\nexport const ExplanationScreen = ({ img, explanation, onClick }: Props) => {\r\n    const { gameOptions } = useContext(exercisesContext)\r\n\r\n    return (\r\n        <div className={`h-screen w-screen z-10 bg-medium-white absolute flex flex-col items-center justify-center ${gameOptions.start ? 'hidden' : ''}`}>\r\n            <img src={img} alt=\"exercise-icon\" />\r\n            <p className=\"my-8 font-bold text-4xl md:text-5xl text-center text-bold-gray\">{explanation}</p>\r\n            <button className=\"py-4 px-8 font-bold bg-bold-gray text-white\" onClick={onClick}>Ready</button>\r\n        </div>\r\n    )\r\n}\r\n","export const getRandomSeconds = (min: number, max: number) => {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}","import { useContext } from 'react';\r\nimport { exercisesContext } from '../ExercisesModule';\r\n\r\nexport const ResultCard = () => {\r\n    const { gameOptions, openSaveScore } = useContext(exercisesContext)\r\n\r\n    return (\r\n        <div className={`flex flex-col justify-center items-center ${gameOptions.finish ? '' : 'hidden'}`}>\r\n            <h2 className='text-white text-6xl font-bold'>{gameOptions.score} ms</h2>\r\n            <p className=\"text-white mb-6 mt-4\">{gameOptions.feedback}</p>\r\n            <div className='flex items-center gap-6'>\r\n                <button className=\"p-2 bg-white\" onClick={() => window.location.reload()}>Try Again</button>\r\n                <button className={`p-2 bg-white ${gameOptions.saveScoreSuccessful && 'bg-gray-300 cursor-not-allowed'}`} disabled={gameOptions.saveScoreSuccessful} onClick={openSaveScore}>Save Score</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { ExplanationScreen } from '../components/ExplanationScreen';\r\nimport { reactionTime } from '../assets';\r\nimport { useReactionTime } from '../hooks/useReactionTime';\r\nimport { ResultCard } from '../components/ResultCard';\r\n\r\nexport const ReactionTime = () => {\r\n  const { state, startGame, click } = useReactionTime()\r\n\r\n  return (\r\n    <div className=''>\r\n      <ExplanationScreen img={reactionTime} explanation=\"Click on the frame as fast you can when it changes color\" onClick={startGame} />\r\n\r\n      <div className={`h-screen flex flex-col justify-center items-center ${state.green ? 'bg-green-500' : 'bg-red-500'}`} onClick={click}>\r\n        <ResultCard />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { useState, useContext } from 'react';\r\nimport { getRandomSeconds } from '../helpers/time';\r\nimport { exercisesContext } from '../ExercisesModule';\r\n\r\nexport interface State {\r\n    green: boolean;\r\n}\r\n\r\nexport const useReactionTime = () => {\r\n\r\n    const MIN_TIME: number = 380;\r\n\r\n    const { gameOptions, handleStart, handleScore, handleFeedback, handleTime } = useContext(exercisesContext)\r\n\r\n\r\n    const [state, setState] = useState<State>({\r\n        green: false,\r\n    })\r\n\r\n    const startGame = () => {\r\n        handleStart('reaction-time')\r\n\r\n        const second = getRandomSeconds(1000, 5000)\r\n\r\n        setTimeout(() => {\r\n            setState(prev => ({\r\n                ...prev,\r\n                green: true,\r\n            }));\r\n            handleTime()\r\n        }, second);\r\n    }\r\n\r\n    const click = () => {\r\n        if (gameOptions.start === false || gameOptions.finish === true) {\r\n            return\r\n        }\r\n\r\n        if (state.green) {\r\n            let date2 = new Date().getTime()\r\n            let score = (date2 - gameOptions.actualTime)\r\n\r\n            handleScore(score)\r\n\r\n            if (score <= MIN_TIME) {\r\n                handleFeedback(\"Approved Test\")\r\n            } else {\r\n                handleFeedback(`Test failed. Time must be less than ${MIN_TIME} ms`)\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        state,\r\n        startGame,\r\n        click\r\n    }\r\n\r\n}","export const getRandomNumbers = (amount: number, start: number, end: number) => {\r\n    let numbers = [];\r\n    while (numbers.length < amount) {\r\n        let r = Math.floor(Math.random() * end) + start;\r\n        if (numbers.indexOf(r) === -1) numbers.push(r);\r\n    }\r\n\r\n    return numbers\r\n}","import { ExplanationScreen } from '../components/ExplanationScreen';\r\nimport { searchNumber } from '../assets';\r\nimport { useSearchNumber } from '../hooks/useSearchNumber';\r\nimport { ResultCard } from '../components/ResultCard';\r\n\r\nexport const SearchNumber = () => {\r\n  const { state, startGame, click } = useSearchNumber()\r\n\r\n  return (\r\n    <div className='bg-bold-blue'>\r\n      <ExplanationScreen img={searchNumber} explanation=\"Click on the appropriate number as quickly as possible\" onClick={startGame} />\r\n\r\n      <div className='h-screen flex flex-col justify-center items-center gap-8'>\r\n        <div className='max-w-3xl'>\r\n          <div className='bg-white flex justify-center items-center py-6'>\r\n            <h3 className='font-bold text-5xl text-bold-blue'>{state.find}</h3>\r\n          </div>\r\n          <div className='flex flex-wrap'>\r\n            {\r\n              state.numbers.map(number => (\r\n                <div key={number} onClick={() => click(number)} className=\"text-white w-60 h-60 flex justify-center items-center cursor-pointer font-bold text-7xl\" style={{ border: '3px solid white', flex: '0 0 33.333333%' }}>{number}</div>\r\n              ))\r\n            }\r\n          </div>\r\n        </div>\r\n        <ResultCard />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { useState, useContext } from 'react';\r\nimport { exercisesContext } from '../ExercisesModule';\r\nimport { getRandomNumbers } from '../helpers/numbers';\r\n\r\nexport interface State {\r\n    correct: number;\r\n    find: number;\r\n    numbers: number[];\r\n}\r\n\r\nexport const useSearchNumber = () => {\r\n\r\n    const MIN_TIME: number = 4870;\r\n    const MAX_CORRECT: number = 4;\r\n\r\n    const { gameOptions, handleStart, handleScore, handleFeedback, handleTime } = useContext(exercisesContext)\r\n\r\n    const [state, setState] = useState<State>({\r\n        correct: 0,\r\n        find: getRandomNumbers(9, 1, 9)[0],\r\n        numbers: getRandomNumbers(9, 1, 9),\r\n    })\r\n\r\n    const startGame = () => {\r\n        handleStart('search-number')\r\n        handleTime()\r\n    }\r\n\r\n    const click = (numberClicked: number) => {\r\n        if (gameOptions.start === false || gameOptions.finish === true) {\r\n            return\r\n        }\r\n\r\n        if (numberClicked === state.find) {\r\n            if (state.correct === MAX_CORRECT) {\r\n                let date2 = new Date().getTime()\r\n                let score = (date2 - gameOptions.actualTime)\r\n\r\n                handleScore(score)\r\n\r\n                if (score <= MIN_TIME) {\r\n                    handleFeedback(\"Approved Test\")\r\n                } else {\r\n                    handleFeedback(`Test failed. Time must be less than ${MIN_TIME} ms`)\r\n                }\r\n\r\n                return\r\n            }\r\n\r\n            setState(prev => ({\r\n                ...prev,\r\n                correct: state.correct + 1,\r\n                find: getRandomNumbers(9, 1, 9)[0],\r\n                numbers: getRandomNumbers(9, 1, 9),\r\n            }));\r\n        }\r\n    }\r\n\r\n    return {\r\n        state,\r\n        startGame,\r\n        click\r\n    }\r\n\r\n}","import { ExplanationScreen } from '../components/ExplanationScreen';\r\nimport { findImpostor, arrowUp, arrowDown } from '../assets';\r\nimport { useFindImpostor } from '../hooks/useFindImpostor';\r\nimport { ResultCard } from '../components/ResultCard';\r\n\r\nexport const FindImpostor = () => {\r\n  const { state, startGame, click } = useFindImpostor()\r\n\r\n  let boxes: any[] = []\r\n  for (let index = 0; index < 16; index++) {\r\n    boxes.push(<div key={index} style={{ border: '3px solid white', flex: '1 0 21%' }} onClick={() => click(index)} className='w-40 h-40 flex flex-col justify-center items-center border-2 border-white cursor-pointer text-white'>{state.impostors.includes(index) ? <img src={arrowDown} alt=\"arrow-up\" /> : <img src={arrowUp} alt=\"arrow-down\" />}</div>)\r\n  }\r\n\r\n  return (\r\n    <div className='bg-bold-blue'>\r\n      <ExplanationScreen img={findImpostor} explanation=\"Find the two down arrows and order them as quickly as possible\" onClick={startGame} />\r\n\r\n      <div className='h-screen flex flex-col justify-center items-center gap-8'>\r\n        <div className='max-w-3xl'>\r\n          <div className='flex flex-wrap gap-4'>\r\n            {boxes}\r\n          </div>\r\n        </div>\r\n        <ResultCard />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { useState, useContext } from 'react';\r\nimport { exercisesContext } from '../ExercisesModule';\r\nimport { getRandomNumbers } from '../helpers/numbers';\r\n\r\nexport interface State {\r\n    impostors: number[];\r\n    correct: number;\r\n}\r\n\r\nexport const useFindImpostor = () => {\r\n\r\n    const MIN_TIME: number = 2800;\r\n    const MAX_CORRECT: number = 1;\r\n\r\n    const { gameOptions, handleStart, handleScore, handleFeedback, handleTime } = useContext(exercisesContext)\r\n\r\n    const [state, setState] = useState<State>({\r\n        correct: 0,\r\n        impostors: getRandomNumbers(2, 0, 15),\r\n    })\r\n\r\n    const startGame = () => {\r\n        handleStart('find-impostor')\r\n        handleTime()\r\n    }\r\n\r\n    const click = (boxClickedIndex: number) => {\r\n        if (gameOptions.start === false || gameOptions.finish === true) {\r\n            return\r\n        }\r\n        \r\n        if (state.impostors.includes(boxClickedIndex)) {\r\n            setState(prev => ({\r\n                ...prev,\r\n                correct: prev.correct + 1,\r\n                impostors: updatedImpostor(state.impostors, boxClickedIndex)\r\n            }));\r\n\r\n            if (state.correct === MAX_CORRECT) {\r\n                let date2 = new Date().getTime()\r\n                let score = (date2 - gameOptions.actualTime)\r\n    \r\n                handleScore(score)\r\n    \r\n                if (score <= MIN_TIME) {\r\n                    handleFeedback(\"Approved Test\")\r\n                } else {\r\n                    handleFeedback(`Test failed. Time must be less than ${MIN_TIME} ms`)\r\n                }\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    const updatedImpostor = (array: number[], value: number) => {\r\n        let index = array.indexOf(value)\r\n        return array.splice(index, 1)\r\n    }\r\n\r\n    return {\r\n        state,\r\n        startGame,\r\n        click\r\n    }\r\n\r\n}","export const getRandomColors = () => {\r\n    let colors = ['black', 'blue', 'gray', 'green', 'orange', 'pink', 'purple', 'red', 'yellow'];\r\n    var j, x, i;\r\n    for (i = colors.length - 1; i > 0; i--) {\r\n        j = Math.floor(Math.random() * (i + 1));\r\n        x = colors[i];\r\n        colors[i] = colors[j];\r\n        colors[j] = x;\r\n    }\r\n    return colors;\r\n}\r\n\r\nexport const getRandomShapes = () => {\r\n    let shapes = ['triangle', 'square', 'rectangle', 'circle', 'rhomb', 'parallelogram', 'trapeze'];\r\n    var j, x, i;\r\n    for (i = shapes.length - 1; i > 0; i--) {\r\n        j = Math.floor(Math.random() * (i + 1));\r\n        x = shapes[i];\r\n        shapes[i] = shapes[j];\r\n        shapes[j] = x;\r\n    }\r\n    return shapes;\r\n}\r\n\r\nexport const getSplitWords = () => {\r\n    let lyric = 'Sometimes I lay under the moon and thank God I am breathing then I pray do not take me soon because I am here for a reason sometimes in my tears I drown but I never let it get me down so when negativity surrounds I know some day it will all turn around because. All my life I have been waiting for I have been praying for the people to say that we do not wanna fight no more there will be no more war and our children will play'\r\n\r\n    return lyric.split(' ');\r\n}","import { ExplanationScreen } from '../components/ExplanationScreen';\r\nimport { searchColor } from '../assets';\r\nimport { useSearchColor } from '../hooks/useSearchColor';\r\nimport { ResultCard } from '../components/ResultCard';\r\n\r\nexport const SearchColor = () => {\r\n    const { state, startGame, click } = useSearchColor()\r\n\r\n    return (\r\n        <div className='bg-bold-blue'>\r\n            <ExplanationScreen img={searchColor} explanation=\"Click on the appropriate color as quickly as possible\" onClick={startGame} />\r\n\r\n            <div className='h-screen flex flex-col justify-center items-center gap-8'>\r\n                <div className='max-w-3xl'>\r\n                    <div className='bg-white flex justify-center items-center py-6'>\r\n                        <h3 className='font-bold text-5xl text-bold-blue uppercase'>{state.find}</h3>\r\n                    </div>\r\n                    <div className='flex flex-wrap'>\r\n                        {\r\n                            state.colors.map(color => (\r\n                                <div key={color} onClick={() => click(color)} className={`text-white w-60 h-60 flex justify-center items-center cursor-pointer font-bold text-7xl box-${color}`} style={{ border: '3px solid white', flex: '0 0 33.333333%' }}></div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <ResultCard />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useContext } from 'react';\r\nimport { exercisesContext } from '../ExercisesModule';\r\nimport { getRandomColors } from '../helpers/strings';\r\n\r\nexport interface State {\r\n    correct: number;\r\n    find: string;\r\n    colors: string[];\r\n}\r\n\r\nexport const useSearchColor = () => {\r\n\r\n    const MIN_TIME: number = 4380;\r\n    const MAX_CORRECT: number = 4;\r\n\r\n    const { gameOptions, handleStart, handleScore, handleFeedback, handleTime } = useContext(exercisesContext)\r\n\r\n    const [state, setState] = useState<State>({\r\n        correct: 0,\r\n        find: getRandomColors()[0],\r\n        colors: getRandomColors()\r\n    })\r\n\r\n    const startGame = () => {\r\n        handleStart('search-color')\r\n        handleTime()\r\n    }\r\n\r\n    const click = (colorClicked: string) => {\r\n        if (gameOptions.start === false || gameOptions.finish === true) {\r\n            return\r\n        }\r\n\r\n        if (colorClicked === state.find) {\r\n            if (state.correct === MAX_CORRECT) {\r\n                let date2 = new Date().getTime()\r\n                let score = (date2 - gameOptions.actualTime)\r\n\r\n                handleScore(score)\r\n\r\n                if (score <= MIN_TIME) {\r\n                    handleFeedback(\"Approved Test\")\r\n                } else {\r\n                    handleFeedback(`Test failed. Time must be less than ${MIN_TIME} ms`)\r\n                }\r\n\r\n                return\r\n            }\r\n\r\n            setState(prev => ({\r\n                ...prev,\r\n                correct: state.correct + 1,\r\n                find: getRandomColors()[0],\r\n                colors: getRandomColors()\r\n            }));\r\n        }\r\n    }\r\n\r\n    return {\r\n        state,\r\n        startGame,\r\n        click\r\n    }\r\n\r\n}","import { ExplanationScreen } from '../components/ExplanationScreen';\r\nimport { colorText } from '../assets';\r\nimport { useColorText } from '../hooks/useColorText';\r\nimport { ResultCard } from '../components/ResultCard';\r\n\r\nexport const ColorText = () => {\r\n    const { state, startGame, click } = useColorText()\r\n\r\n    return (\r\n        <div className='bg-bold-blue'>\r\n            <ExplanationScreen img={colorText} explanation=\"Click as fast as possible when the text matches the text color\" onClick={startGame} />\r\n\r\n            <div className='h-screen flex flex-col justify-center items-center gap-8' onClick={click}>\r\n                <h3 className={`bg-white text-7xl w-11/12 md:w-1/3 font-bold py-12 flex justify-center uppercase text-${state.color}`}>{state.text}</h3>\r\n                <ResultCard />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useContext, useEffect } from 'react';\r\nimport { exercisesContext } from '../ExercisesModule';\r\nimport { getRandomColors } from '../helpers/strings';\r\n\r\nexport interface State {\r\n    color: string;\r\n    text: string;\r\n}\r\n\r\nexport const useColorText = () => {\r\n\r\n    const MIN_TIME: number = 990;\r\n\r\n    const { gameOptions, handleStart, handleScore, handleFeedback, handleTime } = useContext(exercisesContext)\r\n\r\n    const [state, setState] = useState<State>({\r\n        color: getRandomColors()[0],\r\n        text: getRandomColors()[0]\r\n    })\r\n\r\n    const startGame = () => {\r\n        handleStart('color-text')\r\n        check()\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (gameOptions.start) {\r\n            check()\r\n        }\r\n    }, [state])\r\n\r\n\r\n    const check = () => {\r\n\r\n        if (state.color === state.text) {\r\n            handleTime()\r\n        } else {\r\n            setTimeout(function () {\r\n                setState(prev => ({\r\n                    ...prev,\r\n                    color: getRandomColors()[0],\r\n                    text: getRandomColors()[0]\r\n                }));\r\n            }, 1500);\r\n        }\r\n    }\r\n\r\n    const click = () => {\r\n        if (gameOptions.start === false || gameOptions.finish === true) {\r\n            return\r\n        }\r\n\r\n        if (state.color === state.text) {\r\n            let date2 = new Date().getTime()\r\n            let score = (date2 - gameOptions.actualTime)\r\n\r\n            handleScore(score)\r\n\r\n            if (score <= MIN_TIME) {\r\n                handleFeedback(\"Approved Test\")\r\n            } else {\r\n                handleFeedback(`Test failed. Time must be less than ${MIN_TIME} ms`)\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        state,\r\n        startGame,\r\n        click\r\n    }\r\n\r\n}","import { ExplanationScreen } from '../components/ExplanationScreen';\r\nimport { captureColor } from '../assets';\r\nimport { useCaptureColor } from '../hooks/useCaptureColor';\r\nimport { ResultCard } from '../components/ResultCard';\r\n\r\nexport const CaptureColor = () => {\r\n    const { state, startGame, click } = useCaptureColor()\r\n\r\n    return (\r\n        <div className='bg-bold-blue'>\r\n            <ExplanationScreen img={captureColor} explanation=\"Click on the green color when it appears as fast as you can\" onClick={startGame} />\r\n\r\n            <div className='h-screen flex flex-col justify-center items-center gap-8'>\r\n                <div className='max-w-3xl'>\r\n                    <div className='flex flex-wrap'>\r\n                        {\r\n                            state.numbers.map((number, index) => (\r\n                                <div key={number} onClick={() => click(index)} className={`w-60 h-60 flex justify-center items-center cursor-pointer font-bold text-7xl ${index===state.numbers[state.correct] ? 'box-green' : ''}`} style={{ border: '3px solid white', flex: '0 0 33.333333%' }}></div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <ResultCard />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useContext } from 'react';\r\nimport { exercisesContext } from '../ExercisesModule';\r\nimport { getRandomNumbers } from '../helpers/numbers';\r\n\r\nexport interface State {\r\n    correct: number;\r\n    numbers: number[];\r\n}\r\n\r\nexport const useCaptureColor = () => {\r\n\r\n    const MIN_TIME: number = 4075;\r\n    const MAX_CORRECT: number = 8;\r\n\r\n    const { gameOptions, handleStart, handleScore, handleFeedback, handleTime } = useContext(exercisesContext)\r\n\r\n    const [state, setState] = useState<State>({\r\n        correct: 0,\r\n        numbers: getRandomNumbers(9, 0, 9),\r\n    })\r\n\r\n    const startGame = () => {\r\n        handleStart('capture-color')\r\n        handleTime()\r\n    }\r\n\r\n    const click = (numberClicked: number) => {\r\n        if (gameOptions.start === false || gameOptions.finish === true) {\r\n            return\r\n        }\r\n\r\n        if (numberClicked === state.numbers[state.correct]) {\r\n            if (state.correct === MAX_CORRECT) {\r\n                let date2 = new Date().getTime()\r\n                let score = (date2 - gameOptions.actualTime)\r\n\r\n                handleScore(score)\r\n\r\n                if (score <= MIN_TIME) {\r\n                    handleFeedback(\"Approved Test\")\r\n                } else {\r\n                    handleFeedback(`Test failed. Time must be less than ${MIN_TIME} ms`)\r\n                }\r\n\r\n                return\r\n            }\r\n\r\n            setState(prev => ({\r\n                ...prev,\r\n                correct: state.correct + 1,\r\n            }));\r\n        }\r\n    }\r\n\r\n    return {\r\n        state,\r\n        startGame,\r\n        click\r\n    }\r\n\r\n}","import { ExplanationScreen } from '../components/ExplanationScreen';\r\nimport { shapeChange } from '../assets';\r\nimport { useShapeChange } from '../hooks/useShapeChange';\r\nimport { ResultCard } from '../components/ResultCard';\r\n\r\nexport const ShapeChange = () => {\r\n    const { state, startGame, click } = useShapeChange()\r\n\r\n    return (\r\n        <div className='bg-bold-blue'>\r\n            <ExplanationScreen img={shapeChange} explanation=\"Click as soon as you can when the shapes are the same\" onClick={startGame} />\r\n\r\n            <div className='h-screen flex flex-col justify-center items-center gap-8' onClick={click}>\r\n                <div className='flex gap-20'>\r\n                    <div className={`w-60 h-60 md:w-96 md:h-96 bg-cover ${state.static}`}></div>\r\n                    <div className={`w-60 h-60 md:w-96 md:h-96 bg-cover ${state.dynamic}`}></div>\r\n                </div>\r\n                <ResultCard />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useContext, useEffect } from 'react';\r\nimport { exercisesContext } from '../ExercisesModule';\r\nimport { getRandomShapes } from '../helpers/strings';\r\n\r\nexport interface State {\r\n    static: string;\r\n    dynamic: string;\r\n}\r\n\r\nexport const useShapeChange = () => {\r\n\r\n    const MIN_TIME: number = 530;\r\n\r\n    const { gameOptions, handleStart, handleScore, handleFeedback, handleTime } = useContext(exercisesContext)\r\n\r\n    const [state, setState] = useState<State>({\r\n        static: getRandomShapes()[0],\r\n        dynamic: getRandomShapes()[0]\r\n    })\r\n\r\n    const startGame = () => {\r\n        handleStart('shape-change')\r\n        check()\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (gameOptions.start) {\r\n            check()\r\n        }\r\n    }, [state])\r\n\r\n\r\n    const check = () => {\r\n\r\n        if (state.static === state.dynamic) {\r\n            handleTime()\r\n        } else {\r\n            setTimeout(function () {\r\n                setState(prev => ({\r\n                    ...prev,\r\n                    dynamic: getRandomShapes()[0]\r\n                }));\r\n            }, 1500);\r\n        }\r\n    }\r\n\r\n    const click = () => {\r\n        if (gameOptions.start === false || gameOptions.finish === true) {\r\n            return\r\n        }\r\n\r\n        if (state.static === state.dynamic) {\r\n            let date2 = new Date().getTime()\r\n            let score = (date2 - gameOptions.actualTime)\r\n\r\n            handleScore(score)\r\n\r\n            if (score <= MIN_TIME) {\r\n                handleFeedback(\"Approved Test\")\r\n            } else {\r\n                handleFeedback(`Test failed. Time must be less than ${MIN_TIME} ms`)\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        state,\r\n        startGame,\r\n        click\r\n    }\r\n\r\n}","import { useState, useContext } from 'react';\r\nimport { getRandomSeconds } from '../helpers/time';\r\nimport { exercisesContext } from '../ExercisesModule';\r\nconst audio = require(\"../assets/sound.mp3\");\r\n\r\nexport interface State {\r\n    sound: boolean;\r\n}\r\n\r\nexport const useSoundReaction = () => {\r\n\r\n    const MIN_TIME: number = 440;\r\n\r\n    const { gameOptions, handleStart, handleScore, handleFeedback, handleTime } = useContext(exercisesContext)\r\n\r\n\r\n    const [state, setState] = useState<State>({\r\n        sound: false,\r\n    })\r\n\r\n    const startGame = () => {\r\n        handleStart('sound-reaction')\r\n\r\n        const second = getRandomSeconds(1000, 6000)\r\n\r\n        setTimeout(() => {\r\n            setState(prev => ({\r\n                ...prev,\r\n                sound: true,\r\n            }));\r\n            new Audio(audio).play()\r\n            handleTime()\r\n        }, second);\r\n    }\r\n\r\n    const click = () => {\r\n        if (gameOptions.start === false || gameOptions.finish === true) {\r\n            return\r\n        }\r\n\r\n        if (state.sound) {\r\n            let date2 = new Date().getTime()\r\n            let score = (date2 - gameOptions.actualTime)\r\n\r\n            handleScore(score)\r\n\r\n            if (score <= MIN_TIME) {\r\n                handleFeedback(\"Approved Test\")\r\n            } else {\r\n                handleFeedback(`Test failed. Time must be less than ${MIN_TIME} ms`)\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        startGame,\r\n        click\r\n    }\r\n\r\n}","import { ExplanationScreen } from '../components/ExplanationScreen';\r\nimport { soundReaction } from '../assets';\r\nimport { useSoundReaction } from '../hooks/useSoundReaction';\r\nimport { ResultCard } from '../components/ResultCard';\r\n\r\nexport const SoundReaction = () => {\r\n    const { startGame, click } = useSoundReaction()\r\n\r\n    return (\r\n        <div className='bg-bold-blue'>\r\n            <ExplanationScreen img={soundReaction} explanation=\"Click as soon as you hear the sound as fast as you can\" onClick={startGame} />\r\n\r\n            <div className=\"h-screen flex flex-col justify-center items-center\" onClick={click}>\r\n                <ResultCard />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { ExplanationScreen } from '../components/ExplanationScreen';\r\nimport { schulteTable } from '../assets';\r\nimport { useSchulteTable } from '../hooks/useSchulteTable';\r\nimport { ResultCard } from '../components/ResultCard';\r\n\r\nexport const SchulteTable = () => {\r\n    const { state, startGame, click } = useSchulteTable()\r\n\r\n    return (\r\n        <div className='bg-bold-blue'>\r\n            <ExplanationScreen img={schulteTable} explanation=\"Click on the numbers in ascending order as fast as possible\" onClick={startGame} />\r\n\r\n            <div className='h-screen flex flex-col justify-center items-center gap-8'>\r\n                <div className='max-w-5xl'>\r\n                    <div className='bg-white flex justify-center items-center py-6'>\r\n                        <h3 className='font-bold text-5xl text-bold-blue'>{state.find}</h3>\r\n                    </div>\r\n                    <div className='flex flex-wrap'>\r\n                        {\r\n                            state.numbers.map(number => (\r\n                                <div key={number} onClick={() => click(number)} className=\"text-white w-60 h-60 flex justify-center items-center cursor-pointer font-bold text-7xl\" style={{ border: '3px solid white', flex: '1 0 21%' }}>{number}</div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <ResultCard />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useContext } from 'react';\r\nimport { exercisesContext } from '../ExercisesModule';\r\nimport { getRandomNumbers } from '../helpers/numbers';\r\n\r\nexport interface State {\r\n    correct: number;\r\n    find: number;\r\n    numbers: number[];\r\n}\r\n\r\nexport const useSchulteTable = () => {\r\n\r\n    const MIN_TIME: number = 8950;\r\n    const MAX_CORRECT: number = 15;\r\n\r\n    const { gameOptions, handleStart, handleScore, handleFeedback, handleTime } = useContext(exercisesContext)\r\n\r\n    const [state, setState] = useState<State>({\r\n        correct: 0,\r\n        find: 1,\r\n        numbers: getRandomNumbers(16, 1, 16),\r\n    })\r\n\r\n    const startGame = () => {\r\n        handleStart('schulte-table')\r\n        handleTime()\r\n    }\r\n\r\n    const click = (numberClicked: number) => {\r\n        if (gameOptions.start === false || gameOptions.finish === true) {\r\n            return\r\n        }\r\n\r\n        if (numberClicked === state.find) {\r\n            if (state.correct === MAX_CORRECT) {\r\n                let date2 = new Date().getTime()\r\n                let score = (date2 - gameOptions.actualTime)\r\n\r\n                handleScore(score)\r\n\r\n                if (score <= MIN_TIME) {\r\n                    handleFeedback(\"Approved Test\")\r\n                } else {\r\n                    handleFeedback(`Test failed. Time must be less than ${MIN_TIME} ms`)\r\n                }\r\n\r\n                return\r\n            }\r\n\r\n            setState(prev => ({\r\n                ...prev,\r\n                correct: state.correct + 1,\r\n                find: prev.find+1,\r\n            }));\r\n        }\r\n    }\r\n\r\n    return {\r\n        state,\r\n        startGame,\r\n        click\r\n    }\r\n\r\n}","import { ExplanationScreen } from '../components/ExplanationScreen';\r\nimport { visualMemory } from '../assets';\r\nimport { useVisualMemory } from '../hooks/useVisualMemory';\r\nimport { ResultCard } from '../components/ResultCard';\r\n\r\nexport const VisualMemory = () => {\r\n    const { state, startGame, click, gameOptions } = useVisualMemory()\r\n\r\n    let boxes: any[] = []\r\n    for (let index = 0; index < 25; index++) {\r\n        boxes.push(<div key={index} style={{flex: '1 0 17%'}} onClick={() => click(index)} className={`w-36 h-36 flex flex-col justify-center items-center cursor-pointer ${(state.memory.includes(index) && state.show && gameOptions.start) || state.found.includes(index)  ? 'box-orange flip' : 'box-green'}`}></div>)\r\n    }\r\n\r\n    return (\r\n        <div className='bg-bold-blue'>\r\n            <ExplanationScreen img={visualMemory} explanation=\"Click on the orange boxes once they have been turned over\" onClick={startGame} />\r\n\r\n            <div className='h-screen flex flex-col justify-center items-center gap-8'>\r\n                <div className='max-w-3xl'>\r\n                    <div className='flex flex-wrap gap-4'>\r\n                        {boxes}\r\n                    </div>\r\n                </div>\r\n                <ResultCard />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useContext } from 'react';\r\nimport { exercisesContext } from '../ExercisesModule';\r\nimport { getRandomNumbers } from '../helpers/numbers';\r\n\r\nexport interface State {\r\n    correct: number;\r\n    show: boolean;\r\n    found: number[];\r\n    memory: number[];\r\n}\r\n\r\nexport const useVisualMemory = () => {\r\n\r\n    const MIN_TIME: number = 8150;\r\n    const MAX_CORRECT: number = 14;\r\n\r\n    const { gameOptions, handleStart, handleScore, handleFeedback, handleTime } = useContext(exercisesContext)\r\n\r\n    const [state, setState] = useState<State>({\r\n        correct: 0,\r\n        show: true,\r\n        found: [],\r\n        memory: getRandomNumbers(5, 0, 25),\r\n    })\r\n\r\n    const startGame = () => {\r\n        handleStart('visual-memory')\r\n        handleTime()\r\n\r\n        flip()\r\n    }\r\n\r\n    const flip = () => {\r\n        setTimeout(() => {\r\n            setState(prev => ({\r\n                ...prev,\r\n                show: !prev.show\r\n            }));\r\n        }, 1000);\r\n    }\r\n\r\n    const click = (boxClickedIndex: number) => {\r\n        if (gameOptions.start === false || gameOptions.finish === true) {\r\n            return\r\n        }\r\n\r\n        if (state.memory.includes(boxClickedIndex) && !state.found.includes(boxClickedIndex) && !state.show) {\r\n            setState(prev => ({\r\n                ...prev,\r\n                correct: prev.correct + 1,\r\n                found: [...prev.found, boxClickedIndex]\r\n            }));\r\n\r\n            if (state.correct === 4 || state.correct === 9) {\r\n                setState(prev => ({\r\n                    ...prev,\r\n                    show: true,\r\n                    found: [],\r\n                    memory: getRandomNumbers(5, 0, 25),\r\n                }));\r\n\r\n                flip()\r\n            }\r\n\r\n            if (state.correct === MAX_CORRECT) {\r\n                let date2 = new Date().getTime()\r\n                let score = (date2 - gameOptions.actualTime)\r\n\r\n                handleScore(score)\r\n\r\n                if (score <= MIN_TIME) {\r\n                    handleFeedback(\"Approved Test\")\r\n                } else {\r\n                    handleFeedback(`Test failed. Time must be less than ${MIN_TIME} ms`)\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return {\r\n        state,\r\n        startGame,\r\n        click,\r\n        gameOptions\r\n    }\r\n\r\n}","import { ExplanationScreen } from '../components/ExplanationScreen';\r\nimport { trafficLights } from '../assets';\r\nimport { useTrafficLights } from '../hooks/useTrafficLights';\r\nimport { ResultCard } from '../components/ResultCard';\r\n\r\nexport const TrafficLights = () => {\r\n    const { state, startGame, click } = useTrafficLights()\r\n\r\n    let circles: any[] = []\r\n    for (let index = 0; index < 8; index++) {\r\n        circles.push(<div key={index} className={`w-28 h-28 border-2 border-white ${state.lightIndex===4 && index>=4 ? 'box-green' : ''} ${index>=state.lightIndex && index<4 ? 'box-red' : ''}`} style={{ borderRadius: '50%', flex: '1 0 18%' }}></div>)\r\n    }\r\n\r\n    return (\r\n        <div className='bg-bold-blue'>\r\n            <ExplanationScreen img={trafficLights} explanation=\"Click as fast as the red lights turn off and the green lights turn on\" onClick={startGame} />\r\n\r\n            <div className='h-screen flex flex-col justify-center items-center gap-8' onClick={click}>\r\n                <div className='max-w-2xl flex flex-wrap border-2 border-white p-8 gap-8'>\r\n                    {circles}\r\n                </div>\r\n                <ResultCard />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useContext, useEffect } from 'react';\r\nimport { getRandomSeconds } from '../helpers/time';\r\nimport { exercisesContext } from '../ExercisesModule';\r\n\r\nexport interface State {\r\n    lightIndex: number;\r\n    times: number[];\r\n}\r\n\r\nexport const useTrafficLights = () => {\r\n\r\n    const MIN_TIME: number = 350;\r\n\r\n    const { gameOptions, handleStart, handleScore, handleFeedback, handleTime } = useContext(exercisesContext)\r\n\r\n\r\n    const [state, setState] = useState<State>({\r\n        lightIndex: 0,\r\n        times: [1000, 1000, 1000, getRandomSeconds(2000, 6000)],\r\n    })\r\n\r\n    const startGame = () => {\r\n        handleStart('traffic-lights')\r\n        nextLight()\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (gameOptions.start) {\r\n            nextLight()\r\n        }\r\n    }, [state])\r\n\r\n    const nextLight = () => {\r\n        if (state.lightIndex === 4) {\r\n            handleTime()\r\n        } else {\r\n            setTimeout(() => {\r\n                setState(prev => ({\r\n                    ...prev,\r\n                    lightIndex: prev.lightIndex + 1\r\n                }));\r\n                handleTime()\r\n            }, state.times[state.lightIndex]);\r\n        }\r\n    }\r\n\r\n    const click = () => {\r\n        if (gameOptions.start === false || gameOptions.finish === true) {\r\n            return\r\n        }\r\n\r\n        if (state.lightIndex === 4) {\r\n            let date2 = new Date().getTime()\r\n            let score = (date2 - gameOptions.actualTime)\r\n\r\n            handleScore(score)\r\n\r\n            if (score <= MIN_TIME) {\r\n                handleFeedback(\"Approved Test\")\r\n            } else {\r\n                handleFeedback(`Test failed. Time must be less than ${MIN_TIME} ms`)\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        state,\r\n        startGame,\r\n        click\r\n    }\r\n\r\n}","import { useState, useContext } from 'react';\r\nimport { exercisesContext } from '../ExercisesModule';\r\nimport { getRandomSeconds } from '../helpers/time';\r\nconst audio = require(\"../assets/correct.mp3\");\r\n\r\nexport interface State {\r\n    correct: number;\r\n    key: number;\r\n}\r\n\r\nexport const usePressKey = () => {\r\n\r\n    const MIN_TIME: number = 7160;\r\n    const MAX_CORRECT: number = 14;\r\n\r\n    const { gameOptions, handleStart, handleScore, handleFeedback, handleTime } = useContext(exercisesContext)\r\n\r\n    const [state, setState] = useState<State>({\r\n        correct: 0,\r\n        key: getRandomSeconds(37, 40)\r\n    })\r\n\r\n    const startGame = () => {\r\n        handleStart('press-key')\r\n        handleTime()\r\n    }\r\n\r\n    const click = (event: any) => {\r\n        if (gameOptions.start === false || gameOptions.finish === true) {\r\n            return\r\n        }\r\n\r\n        if (event.keyCode === state.key) {\r\n\r\n            if (state.correct === MAX_CORRECT) {\r\n                let date2 = new Date().getTime()\r\n                let score = (date2 - gameOptions.actualTime)\r\n\r\n                handleScore(score)\r\n\r\n                if (score <= MIN_TIME) {\r\n                    handleFeedback(\"Approved Test\")\r\n                } else {\r\n                    handleFeedback(`Test failed. Time must be less than ${MIN_TIME} ms`)\r\n                }\r\n\r\n                return\r\n            }\r\n\r\n            setState(prev => ({\r\n                ...prev,\r\n                correct: prev.correct + 1,\r\n                key: getRandomSeconds(37, 40)\r\n            }));\r\n            new Audio(audio).play()\r\n\r\n\r\n        }\r\n    }\r\n\r\n    return {\r\n        state,\r\n        startGame,\r\n        click\r\n    }\r\n\r\n}","export const NoPhone = () => {\r\n    return (\r\n        <div className='bg-bold-blue h-screen w-screen flex flex-col justify-center items-center gap-8 px-4'>\r\n            <img src=\"/logo.png\" alt='logo' />\r\n            <p className='text-white text-center'>This exercise is not available for mobile devices, please switch to a computer to enjoy the game.</p>\r\n        </div>\r\n    )\r\n}\r\n","import { ExplanationScreen } from '../components/ExplanationScreen';\r\nimport { pressKey } from '../assets';\r\nimport { usePressKey } from '../hooks/usePressKey';\r\nimport { ResultCard } from '../components/ResultCard';\r\nimport { NoPhone } from '../components/NoPhone';\r\n\r\nexport const PressKey = () => {\r\n    const { state, startGame, click } = usePressKey()\r\n\r\n    if (window.screen.width < 1000) {\r\n        return (\r\n          <NoPhone />\r\n        )\r\n      }\r\n\r\n    return (\r\n        <div className='bg-bold-blue'>\r\n            <ExplanationScreen img={pressKey} explanation=\"You must press the direction key requested on the screen\" onClick={startGame} />\r\n\r\n            <div className='h-screen flex flex-col justify-center items-center gap-8' tabIndex={0} onKeyDown={click}>\r\n                <h3 className={`bg-white text-7xl w-11/12 md:w-1/3 font-bold py-12 flex justify-center uppercase`}>{state.key === 37 ? 'Left' : state.key === 38 ? 'Up' : state.key === 39 ? 'Right' : state.key === 40 ? 'Down' : \"NaN\"}</h3>\r\n                <ResultCard />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { ExplanationScreen } from '../components/ExplanationScreen';\r\nimport { targetShoot } from '../assets';\r\nimport { useTargetShoot } from '../hooks/useTargetShoot';\r\nimport { ResultCard } from '../components/ResultCard';\r\nimport { NoPhone } from '../components/NoPhone';\r\n\r\n\r\nexport const TargetShoot = () => {\r\n  const { state, startGame, click } = useTargetShoot()\r\n\r\n  if (window.screen.width < 1000) {\r\n    return (\r\n      <NoPhone />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className='bg-bold-blue no-phone'>\r\n      <ExplanationScreen img={targetShoot} explanation=\"Click on the frame as fast you can when it changes color\" onClick={startGame} />\r\n\r\n      <div className='h-screen flex flex-col justify-center items-center gap-8'>\r\n        <div className='w-full h-full' style={{ maxWidth: '1100px', maxHeight: '700px', border: '3px solid white' }}>\r\n          <div className='bg-light-blue w-48 h-48 cursor-pointer absolute' style={{ borderRadius: '50%', transform: `translateX(${state.x}px) translateY(${state.y}px)` }} onClick={click}></div>\r\n        </div>\r\n        <ResultCard />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { useState, useContext } from 'react';\r\nimport { exercisesContext } from '../ExercisesModule';\r\nimport { getRandomSeconds } from '../helpers/time';\r\n\r\nexport interface State {\r\n    correct: number;\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport const useTargetShoot = () => {\r\n\r\n    const MIN_TIME: number = 7950;\r\n    const MAX_CORRECT: number = 14;\r\n\r\n    const { gameOptions, handleStart, handleScore, handleFeedback, handleTime } = useContext(exercisesContext)\r\n\r\n    const [state, setState] = useState<State>({\r\n        correct: 0,\r\n        x: 490,\r\n        y: 290\r\n    })\r\n\r\n    const startGame = () => {\r\n        handleStart('target-shoot')\r\n        handleTime()\r\n    }\r\n\r\n    const click = () => {\r\n        if (gameOptions.start === false || gameOptions.finish === true) {\r\n            return\r\n        }\r\n\r\n        if (state.correct === MAX_CORRECT) {\r\n            let date2 = new Date().getTime()\r\n            let score = (date2 - gameOptions.actualTime)\r\n\r\n            handleScore(score)\r\n\r\n            if (score <= MIN_TIME) {\r\n                handleFeedback(\"Approved Test\")\r\n            } else {\r\n                handleFeedback(`Test failed. Time must be less than ${MIN_TIME} ms`)\r\n            }\r\n\r\n            return\r\n        }\r\n\r\n        setState(prev => ({\r\n            ...prev,\r\n            correct: state.correct + 1,\r\n            x: getRandomSeconds(1, 950),\r\n            y: getRandomSeconds(1, 550)\r\n        }));\r\n    }\r\n\r\n    return {\r\n        state,\r\n        startGame,\r\n        click\r\n    }\r\n\r\n}","import { ExplanationScreen } from '../components/ExplanationScreen';\r\nimport { longestLine } from '../assets';\r\nimport { useLongestLine } from '../hooks/useLongestLine';\r\nimport { ResultCard } from '../components/ResultCard';\r\n\r\nexport const LongestLine = () => {\r\n    const { state, startGame, click } = useLongestLine()\r\n\r\n    return (\r\n        <div className='bg-bold-blue'>\r\n            <ExplanationScreen img={longestLine} explanation=\"Find and click on the longest line as quickly as possible\" onClick={startGame} />\r\n\r\n            <div className='h-screen flex flex-col justify-center items-center gap-8'>\r\n                <div className='flex flex-row items-end gap-12'>\r\n                    {\r\n                        state.lines.map(line => (\r\n                            <hr key={line} onClick={() => click(line)} className={`text-white cursor-pointer bg-white w-16 ${line === 1 ? 'h-60' : line === 2 ? 'h-64' : line === 3 ? 'h-72' : line === 4 ? 'h-80' : line === 5 ? 'h-96' : ''  }`} />\r\n                        ))\r\n                    }\r\n                </div>\r\n\r\n                <ResultCard />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useContext } from 'react';\r\nimport { exercisesContext } from '../ExercisesModule';\r\nimport { getRandomNumbers } from '../helpers/numbers';\r\n\r\nexport interface State {\r\n    correct: number;\r\n    lines: number[];\r\n}\r\n\r\nexport const useLongestLine = () => {\r\n\r\n    const MIN_TIME: number = 6100;\r\n    const MAX_CORRECT: number = 9;\r\n\r\n    const { gameOptions, handleStart, handleScore, handleFeedback, handleTime } = useContext(exercisesContext)\r\n\r\n    const [state, setState] = useState<State>({\r\n        correct: 0,\r\n        lines: getRandomNumbers(5, 1, 5),\r\n    })\r\n\r\n    const startGame = () => {\r\n        handleStart('longest-line')\r\n        handleTime()\r\n    }\r\n\r\n    const click = (lineClickedIndex: number) => {\r\n        if (gameOptions.start === false || gameOptions.finish === true) {\r\n            return\r\n        }\r\n\r\n        if (lineClickedIndex === 5) {\r\n            if (state.correct === MAX_CORRECT) {\r\n                let date2 = new Date().getTime()\r\n                let score = (date2 - gameOptions.actualTime)\r\n\r\n                handleScore(score)\r\n\r\n                if (score <= MIN_TIME) {\r\n                    handleFeedback(\"Approved Test\")\r\n                } else {\r\n                    handleFeedback(`Test failed. Time must be less than ${MIN_TIME} ms`)\r\n                }\r\n\r\n                return\r\n            }\r\n\r\n            setState(prev => ({\r\n                ...prev,\r\n                correct: prev.correct + 1,\r\n                lines: getRandomNumbers(5, 1, 5),\r\n            }));\r\n        }\r\n\r\n    }\r\n\r\n    return {\r\n        state,\r\n        startGame,\r\n        click\r\n    }\r\n\r\n}","import { ExplanationScreen } from '../components/ExplanationScreen';\r\nimport { clickLimit } from '../assets';\r\nimport { useClickLimit } from '../hooks/useClickLimit';\r\nimport { ResultCard } from '../components/ResultCard';\r\n\r\nexport const ClickLimit = () => {\r\n    const { state, startGame, click } = useClickLimit()\r\n\r\n    return (\r\n        <div className='bg-bold-blue'>\r\n            <ExplanationScreen img={clickLimit} explanation=\"Click on the screen as many times as you can in 10 seconds\" onClick={startGame} />\r\n\r\n            <div className='h-screen flex flex-col justify-center items-center gap-8' onClick={click}>\r\n                <div className='text-white flex items-center'>\r\n                    <div className='flex flex-col gap-2 justify-center items-center w-60 h-60' style={{ border: '3px solid white' }}>\r\n                        <h4 className='text-4xl font-medium'>Click</h4>\r\n                        <h3 className='text-5xl font-bold'>{state.click}</h3>\r\n                    </div>\r\n                    <div className='flex flex-col gap-2 justify-center items-center w-60 h-60' style={{ border: '3px solid white' }}>\r\n                        <h4 className='text-4xl font-medium'>Time</h4>\r\n                        <h3 className='text-5xl font-bold'>{state.time}</h3>\r\n                    </div>\r\n                </div>\r\n                <ResultCard />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useContext, useEffect } from 'react';\r\nimport { exercisesContext } from '../ExercisesModule';\r\n\r\nexport interface State {\r\n    click: number;\r\n    time: number;\r\n}\r\n\r\nexport const useClickLimit = () => {\r\n\r\n    const MIN_CLICKS: number = 65;\r\n\r\n    const { gameOptions, handleStart, handleScore, handleFeedback, handleTime } = useContext(exercisesContext)\r\n\r\n\r\n    const [state, setState] = useState<State>({\r\n        click: 0,\r\n        time: 10,\r\n    })\r\n\r\n    const startGame = () => {\r\n        handleStart('click-limit')\r\n        time()\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (gameOptions.start) {\r\n            time()\r\n        }\r\n    }, [state.time])\r\n\r\n    const time = () => {\r\n        if (state.time > 0) {\r\n            setTimeout(function () {\r\n                setState(prev => ({\r\n                    ...prev,\r\n                    time: prev.time - 1\r\n                }));\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    const click = () => {\r\n        if (gameOptions.start === false || gameOptions.finish === true) {\r\n            return\r\n        }\r\n\r\n        if (state.time === 0) {\r\n\r\n            handleScore(state.click)\r\n\r\n            if (state.click >= MIN_CLICKS) {\r\n                handleFeedback(\"Approved Test\")\r\n            } else {\r\n                handleFeedback(`Test failed. Clicks must be higher than ${MIN_CLICKS}`)\r\n            }\r\n\r\n            return\r\n        }\r\n\r\n        setState(prev => ({\r\n            ...prev,\r\n            click: prev.click + 1\r\n        }));\r\n    }\r\n\r\n    return {\r\n        state,\r\n        startGame,\r\n        click\r\n    }\r\n\r\n}","import { ExplanationScreen } from '../components/ExplanationScreen';\r\nimport { typingTest } from '../assets';\r\nimport { useTypingTest } from '../hooks/useTypingTest';\r\nimport { ResultCard } from '../components/ResultCard';\r\n\r\nexport const TypingTest = () => {\r\n    const { state, startGame, enter, uptade, gameOptions } = useTypingTest()\r\n\r\n    return (\r\n        <div className='bg-bold-blue'>\r\n            <ExplanationScreen img={typingTest} explanation=\"Write a series of words without making mistakes as fast as you can\" onClick={startGame} />\r\n\r\n            <div className='h-screen flex flex-col justify-center items-center gap-8'>\r\n                <div className='flex items-center flex-wrap bg-white p-8 max-w-screen-xl'>\r\n                    {\r\n                        state.words.map((word, index) => (\r\n                            <p key={index} className={`mx-1 font-medium text-3xl text-bold-gray ${state.incorrect.includes(index) && 'text-red-500'} ${state.correct.includes(index) && 'text-green-500'} ${index === state.attempt ? 'bg-light-gray' : ''}`}>{word}</p>\r\n                        ))\r\n                    }\r\n                </div>\r\n                <form onKeyUp={(e) => enter(e)}>\r\n                    <input autoFocus value={state.value} disabled={gameOptions.finish} onChange={uptade}  />\r\n                </form>\r\n                <ResultCard />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useContext } from 'react';\r\nimport { exercisesContext } from '../ExercisesModule';\r\nimport { getSplitWords } from '../helpers/strings';\r\n\r\nexport interface State {\r\n    attempt: number;\r\n    incorrect: number[];\r\n    correct: number[];\r\n    words: string[];\r\n    value: string\r\n}\r\n\r\nexport const useTypingTest = () => {\r\n\r\n    const MIN_TIME: number = 120000;\r\n    const MIN_AVERAGE: number = 70;\r\n    const MAX_CORRECT: number = 90;\r\n\r\n    const { gameOptions, handleStart, handleScore, handleFeedback, handleTime } = useContext(exercisesContext)\r\n\r\n    const [state, setState] = useState<State>({\r\n        attempt: 0,\r\n        incorrect: [],\r\n        correct: [],\r\n        words: getSplitWords(),\r\n        value: ''\r\n    })\r\n\r\n    const startGame = () => {\r\n        handleStart('typing-test')\r\n        handleTime()\r\n    }\r\n\r\n    const uptade = (event: any) => {\r\n        setState(prev => ({\r\n            ...prev,\r\n            value: event.target.value\r\n        }));\r\n\r\n    }\r\n\r\n    const enter = (event: any) => {\r\n        if (gameOptions.start === false || gameOptions.finish === true) {\r\n            return\r\n        }\r\n\r\n        if (event.keyCode === 32 || event.keyCode === 229) {\r\n            \r\n\r\n            if (event.target.value.trim() === state.words[state.attempt]) {\r\n                setState(prev => ({\r\n                    ...prev,\r\n                    correct: [...prev.correct, state.attempt]\r\n                }));\r\n            } else {\r\n                setState(prev => ({\r\n                    ...prev,\r\n                    incorrect: [...prev.incorrect, state.attempt]\r\n                }));\r\n            }\r\n\r\n            setState(prev => ({\r\n                ...prev,\r\n                attempt: state.attempt + 1,\r\n                value: ''\r\n            }));\r\n\r\n            if (state.attempt === MAX_CORRECT) {\r\n                let date2 = new Date().getTime()\r\n                let score = (date2 - gameOptions.actualTime)\r\n                let average = Math.round((state.correct.length/91)*100)\r\n\r\n                handleScore(score)\r\n\r\n                if (score <= MIN_TIME && average>=MIN_AVERAGE) {\r\n                    handleFeedback(\"Approved Test\")\r\n                } else {\r\n                    handleFeedback(`Test failed. Time must be less than ${MIN_TIME} ms and precision higher than ${MIN_AVERAGE}%`)\r\n                }\r\n\r\n                return\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return {\r\n        state,\r\n        startGame,\r\n        enter,\r\n        uptade,\r\n        gameOptions\r\n    }\r\n\r\n}","import { useContext, useState } from 'react';\r\nimport { exercisesContext } from '../ExercisesModule';\r\nimport Swal from 'sweetalert2'\r\n\r\nexport const SaveScore = () => {\r\n    const { gameOptions, closeSaveScore, handlesaveScoreSuccessful } = useContext(exercisesContext);\r\n    const [username, setUsername] = useState('')\r\n\r\n    const postScore = async (exercise: string, username: string, score: number) => {\r\n        handlesaveScoreSuccessful(true)\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                exercise,\r\n                username,\r\n                score\r\n            })\r\n        };\r\n        fetch('https://aim-max-backend.herokuapp.com/api/leaderboard', requestOptions)\r\n            .then(async response => {\r\n\r\n                if (response.ok) {\r\n                    Swal.fire({ title: 'Success', text: 'Score saved successfully.', icon: 'success', confirmButtonColor: '#172333' });\r\n                }else{\r\n                    handlesaveScoreSuccessful(false)\r\n                    Swal.fire({ title: 'Internal Error', text: 'Error saving score, please try again.', icon: 'error', confirmButtonColor: '#172333' });\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                handlesaveScoreSuccessful(false)\r\n                Swal.fire({ title: 'Internal Error', text: 'Error saving score, please try again.', icon: 'error', confirmButtonColor: '#172333' });\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div className={`overlay ${gameOptions.saveScore && 'active'}`}>\r\n            <div className={`modal w-full md:w-124 py-8 px-10 rounded-3xl bg-white ${gameOptions.saveScore && 'active'}`}>\r\n                <h1 className=\"text-3xl font-bold text-medium-blue\">Save Score</h1>\r\n                <input className=\"border border-medium-gray w-full p-2 rounded-xl mb-8 my-1\" placeholder=\"Username\" value={username} onInput={(e: any) => setUsername(e.target.value.trim())} />\r\n                <div className=\"flex gap-6 justify-end w-full\">\r\n                    <button className=\"bg-medium-blue rounded-xl text-white py-3 px-5\" onClick={closeSaveScore}>Cancel</button>\r\n                    <button className={`bg-medium-blue rounded-xl text-white py-3 px-8 ${username === '' && 'bg-gray-400 cursor-not-allowed'}`} disabled={username === ''} onClick={() => { postScore(gameOptions.exercise, username, gameOptions.score); closeSaveScore() }}>Save</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { createContext } from 'react';\r\nimport { Route, Routes, Navigate } from 'react-router-dom';\r\nimport * as Pages from './pages';\r\nimport { useExercises } from './hooks/useExercises';\r\nimport { State as useExercisesState } from './hooks/useExercises';\r\nimport './styles/styles.css';\r\nimport './animations/animations.css';\r\nimport { SaveScore } from './components/SaveScore';\r\n\r\ninterface exercisesContext {\r\n    gameOptions: useExercisesState;\r\n    handleStart: (exercise: string) => void;\r\n    handleScore: (score: number) => void;\r\n    handleFeedback: (feedback: string) => void;\r\n    handleTime: () => void;\r\n    openSaveScore: () => void;\r\n    closeSaveScore: () => void;\r\n    handlesaveScoreSuccessful: (saveScoreSuccessful: boolean) => void;\r\n}\r\n\r\nexport const exercisesContext = createContext({} as exercisesContext);\r\nconst { Provider } = exercisesContext;\r\n\r\nexport const ExercisesModule = () => {\r\n\r\n    const { gameOptions, handleStart, handleScore, handleFeedback, handleTime, openSaveScore, closeSaveScore, handlesaveScoreSuccessful } = useExercises()\r\n\r\n    return (\r\n        <Provider value={{ gameOptions, handleStart, handleScore, handleFeedback, handleTime, openSaveScore, closeSaveScore, handlesaveScoreSuccessful }}>\r\n            <div>\r\n                <SaveScore />\r\n                <Routes>\r\n                    <Route path=\"reaction-time\" element={<Pages.ReactionTime />} />\r\n                    <Route path=\"search-number\" element={<Pages.SearchNumber />} />\r\n                    <Route path=\"find-impostor\" element={<Pages.FindImpostor />} />\r\n                    <Route path=\"search-color\" element={<Pages.SearchColor />} />\r\n                    <Route path=\"color-text\" element={<Pages.ColorText />} />\r\n                    <Route path=\"capture-color\" element={<Pages.CaptureColor />} />\r\n                    <Route path=\"shape-change\" element={<Pages.ShapeChange />} />\r\n                    <Route path=\"sound-reaction\" element={<Pages.SoundReaction />} />\r\n                    <Route path=\"schulte-table\" element={<Pages.SchulteTable />} />\r\n                    <Route path=\"visual-memory\" element={<Pages.VisualMemory />} />\r\n                    <Route path=\"traffic-lights\" element={<Pages.TrafficLights />} />\r\n                    <Route path=\"press-key\" element={<Pages.PressKey />} />\r\n                    <Route path=\"target-shoot\" element={<Pages.TargetShoot />} />\r\n                    <Route path=\"longest-line\" element={<Pages.LongestLine />} />\r\n                    <Route path=\"click-limit\" element={<Pages.ClickLimit />} />\r\n                    <Route path=\"typing-test\" element={<Pages.TypingTest />} />\r\n\r\n                    <Route path=\"*\" element={<Navigate to=\"/home\" replace />} />\r\n                </Routes>\r\n            </div>\r\n        </Provider>\r\n    )\r\n}\r\n\r\nexport default ExercisesModule\r\n\r\n","import { useState } from 'react';\r\n\r\nexport interface State {\r\n    start: boolean;\r\n    exercise: string;\r\n    actualTime: number;\r\n    score: number;\r\n    feedback: string;\r\n    finish: boolean;\r\n    saveScore: boolean;\r\n    saveScoreSuccessful: boolean;\r\n}\r\n\r\nexport const useExercises = () => {\r\n\r\n    const [gameOptions, setGameOptions] = useState<State>({\r\n        start: false,\r\n        exercise: '',\r\n        actualTime: 0,\r\n        score: 0,\r\n        feedback: '',\r\n        finish: false,\r\n        saveScore: false,\r\n        saveScoreSuccessful: false\r\n    })\r\n\r\n    const handleStart = (exercise: string) => {\r\n        setGameOptions(prev => ({\r\n            ...prev,\r\n            start: true,\r\n            exercise\r\n        }));\r\n    }\r\n\r\n    const handleScore = (score: number) => {\r\n        setGameOptions(prev => ({\r\n            ...prev,\r\n            score: score,\r\n            finish: true\r\n        }));\r\n    }\r\n\r\n    const handleFeedback = (feedback: string) => {\r\n        setGameOptions(prev => ({\r\n            ...prev,\r\n            feedback: feedback\r\n        }));\r\n    }\r\n\r\n    const handleTime = () => {\r\n        setGameOptions(prev => ({\r\n            ...prev,\r\n            actualTime: new Date().getTime()\r\n        }));\r\n    }\r\n\r\n    const openSaveScore = () => {\r\n        setGameOptions(prev => ({\r\n            ...prev,\r\n            saveScore: true\r\n        }));\r\n    }\r\n\r\n    const closeSaveScore = () => {\r\n        setGameOptions(prev => ({\r\n            ...prev,\r\n            saveScore: false\r\n        }));\r\n    }\r\n\r\n    const handlesaveScoreSuccessful = (saveScoreSuccessful: boolean) => {\r\n        setGameOptions(prev => ({\r\n            ...prev,\r\n            saveScoreSuccessful\r\n        }));\r\n    }\r\n\r\n    return {\r\n        gameOptions,\r\n        handleStart,\r\n        handleScore,\r\n        handleFeedback,\r\n        handleTime,\r\n        openSaveScore,\r\n        closeSaveScore,\r\n        handlesaveScoreSuccessful\r\n    }\r\n\r\n}"],"names":["ExplanationScreen","img","explanation","onClick","gameOptions","useContext","exercisesContext","className","start","src","alt","getRandomSeconds","min","max","Math","floor","random","ResultCard","openSaveScore","finish","score","feedback","window","location","reload","saveScoreSuccessful","disabled","ReactionTime","handleStart","handleScore","handleFeedback","handleTime","useState","green","state","setState","startGame","second","setTimeout","prev","click","Date","getTime","actualTime","useReactionTime","reactionTime","getRandomNumbers","amount","end","numbers","length","r","indexOf","push","SearchNumber","correct","find","numberClicked","useSearchNumber","searchNumber","map","number","style","border","flex","FindImpostor","impostors","updatedImpostor","array","value","index","splice","boxClickedIndex","includes","useFindImpostor","boxes","arrowDown","arrowUp","findImpostor","getRandomColors","j","x","i","colors","getRandomShapes","shapes","SearchColor","colorClicked","useSearchColor","searchColor","color","ColorText","text","useEffect","check","useColorText","colorText","CaptureColor","useCaptureColor","captureColor","ShapeChange","static","dynamic","useShapeChange","shapeChange","audio","require","SoundReaction","sound","Audio","play","useSoundReaction","soundReaction","SchulteTable","useSchulteTable","schulteTable","VisualMemory","show","found","memory","flip","useVisualMemory","visualMemory","TrafficLights","lightIndex","times","nextLight","useTrafficLights","circles","borderRadius","trafficLights","NoPhone","PressKey","key","event","keyCode","usePressKey","screen","width","pressKey","tabIndex","onKeyDown","TargetShoot","y","useTargetShoot","targetShoot","maxWidth","maxHeight","transform","LongestLine","lines","lineClickedIndex","useLongestLine","longestLine","line","ClickLimit","time","useClickLimit","clickLimit","TypingTest","MIN_TIME","attempt","incorrect","words","split","enter","target","trim","average","round","uptade","useTypingTest","typingTest","word","onKeyUp","e","autoFocus","onChange","SaveScore","closeSaveScore","handlesaveScoreSuccessful","username","setUsername","postScore","exercise","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","ok","Swal","title","icon","confirmButtonColor","catch","error","saveScore","placeholder","onInput","createContext","Provider","ExercisesModule","setGameOptions","useExercises","path","element","to","replace"],"sourceRoot":""}